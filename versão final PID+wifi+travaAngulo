#include <Kalman.h>
#include "Wire.h"
#include "MPU6050.h"
#include <HTTP_Method.h>
#include <Uri.h>
#include <WebServer.h>
#include <Wire.h>
#include <WiFi.h>
#include <ESP32Servo.h>

//_____________________________OBJETOS DE BIBLIOTECA E ATIVAÇÃO DE DETERMINADAS VARIAVEIS NO MONITOR SERIAL_____________________________________
Servo motorPitch;
Servo motorRoll;

bool debug = 0;
bool printServos = 0;

MPU6050 mpu;         // Cria obj classe MPU6050
Kalman kalmanPitch;  // Obj Kalman para pitch
Kalman kalmanRoll;   // Obj Kalman para roll
//________________________________________________________PREDEFINIÇÕES DE WIFI__________________________________________________________________
const char* ssid = "Argenton";
const char* password = "eruw7893";

WebServer server(80);
//___________________________________________________________SENSOR MPU 6050_____________________________________________________________________
int16_t acelX, acelY, acelZ;
int16_t giroX, giroY, giroZ;
//_________________________________________________________PID E FILTRO KALMAN___________________________________________________________________
float Kp = 1.5;
float Ki = 0.018;
float Kd = 0.0;

float setPointPitch = 0.0;
float setPointRoll = 0.0;

float pitch, roll;

float pitchError, pitchPreviousError;
float pitchIntegral, pitchDerivative;
float pitchOutput;

float rollError, rollPreviousError;
float rollIntegral, rollDerivative;
float rollOutput;
//________________________________________________CONSTANTES DE VALOR INICIAL DOS MOTORES________________________________________________________
float rollPosInicial = 100.0;
float pitchPosInicial = 90.0;
//_______________________________________________________________________________________________________________________________________________
unsigned long timer = micros();

void setup() {
  Wire.begin();  // Inicializa I2C
  Serial.begin(115200);
  mpu.initialize();  // Inicializa MPU

  kalmanPitch.setAngle(0);
  kalmanRoll.setAngle(0);

  motorPitch.attach(15);
  motorRoll.attach(4);

  motorPitch.write(pitchPosInicial);
  motorRoll.write(rollPosInicial);

  timer = micros();

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("connecting to WIFI ...");
  }

  Serial.println("conectado");

  server.on("/data", HTTP_GET, []() {
    String json = "{\"pitch\":" + String(pitch) + ", \"roll\":" + String(roll) + ", \"pidPitchOutput\":" + String(pitchOutput) + ", \"pidRollOutput\":" + String(rollOutput) + "}";
    server.send(100, "application/json", json);
  });

  server.begin();
  Serial.println("server started");
  Serial.println("Access: http://");
  Serial.println(WiFi.localIP());
}

void loop() {
  mpu.getMotion6(&acelX, &acelY, &acelZ, &giroX, &giroY, &giroZ);

  float acelX_g = acelX / 16384.0;
  float acelY_g = acelY / 16384.0;
  float acelZ_g = acelZ / 16384.0;

  float giroX_deg_s = giroX / 131.0;
  float giroY_deg_s = giroY / 131.0;
  float giroZ_deg_s = giroZ / 131.0;

  float dt = (micros() - timer) / 1000000.0;
  timer = micros();

  float pitchAcel = atan2(acelY_g, acelZ_g) * 180 / PI;
  float rollAcel = atan2(acelX_g, acelZ_g) * 180 / PI;

  pitch = kalmanPitch.getAngle(pitchAcel, giroY_deg_s, dt);
  roll = kalmanRoll.getAngle(rollAcel, giroX_deg_s, dt);

  pitchError = setPointPitch - pitch;
  pitchIntegral += pitchError * dt;
  pitchDerivative = (pitchError - pitchPreviousError) / dt;
  pitchOutput = Kp * pitchError + Ki * pitchIntegral + Kd * pitchDerivative;
  pitchPreviousError = pitchError;

  rollError = setPointRoll - roll;
  rollIntegral += rollError * dt;
  rollDerivative = (rollError - rollPreviousError) / dt;
  rollOutput = Kp * rollError + Ki * rollIntegral + Kd * rollDerivative;
  rollPreviousError = rollError;

  


  // Atualização dos servos com a função constrain()
  float pitchServoAngle = constrain(-pitchOutput + pitchPosInicial, 0, 180);
  float rollServoAngle = constrain(-rollOutput + rollPosInicial, 0, 180);

  if(pitch > -15)
  {
    motorPitch.write(pitchServoAngle);
  } 
  else 
  {
    motorPitch.write(100);
  }

  motorRoll.write(rollServoAngle);

  if (debug) {
    Serial.print("  pitch:  ");
    Serial.print(pitch);
    //Serial.print("  pitchOutput: ");
    //Serial.print(pitchOutput);

    Serial.print("  roll:  ");
    Serial.println(roll);
    //Serial.print("  rollOutput:  ");
    //Serial.println(rollOutput);
  }

  if (printServos) {
    Serial.print("anguloMotorPitch:  ");
    Serial.print(pitchServoAngle);
    Serial.print("  anguloMotorRoll:  ");
    Serial.println(rollServoAngle);
  }

  server.handleClient();
}
